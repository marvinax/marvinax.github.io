if (true) {
    if (typeof Object.create !== 'function') {
        Object.create = function(a) {
            function F() {};
            F.prototype = a;
            return new F()
        }
    }(function($, i, j, k) {
        var l = {
            init: function(e, f) {
                var g = this;
                g.elem = f;
                g.$elem = $(f);
                g.pickerState = g.bodyState = [];
                g.options = g.setOptions(e);
                g.$elem.bind("click", function(d) {
                    d.preventDefault();
                    if (g.pickerWindow) {
                        if (g.pickerWindow.attr("data-bmd-cp") == "closed") {
                            g.showMe();
                            return true
                        } else {
                            g.hideMe();
                            return true
                        }
                    }
                    if (typeof g.options.colors == "string") {
                        g.loadColors(g.options.colors).done(function(a, b, c) {
                            if (typeof a == 'object') {
                                g.options.colors = a;
                                g.build();
                                return true
                            }
                        }).fail(function(a, b, c) {
                            console.log("FAIL! " + c);
                            g.build();
                            return false
                        })
                    } else {
                        g.build()
                    }
                })
            },
            build: function(e) {
                var c = this;
                c.colors = c.collectColors();
                c.pickerWindow = $(c.template.div, {
                    class: 'bmd-cp-window'
                }).appendTo("body");
                c.pickerContainer = $(c.template.div, {
                    class: 'bmd-cp-container'
                }).appendTo(c.pickerWindow);
                c.itemContainer = $(c.template.itemContainer, {
                    class: 'bmd-cp-item-container'
                }).appendTo(c.pickerContainer);
                var d;
                $.each(c.colors, function(a, b) {
                    if (a == 0 || (a) % c.options.rowitem == 0) {
                        d = $(c.template.itemRow, {
                            class: 'bmd-cp-item-row'
                        }).appendTo(c.itemContainer)
                    }
                    c_item = $(c.template.item);
                    c_item.css({
                        backgroundColor: b,
                        width: c.options.itemwidth,
                        height: c.options.itemheight
                    }).attr("title", c.returnColor(b)).data("color", b).bind("click", function(e) {
                        $this = $(this);
                        e.preventDefault();
                        c.options.onSelect(c.$elem, c.returnColor($this.data("color")));
                        c.hideMe()
                    });
                    c_item.appendTo(d)
                });
                t = c.colors.length > c.options.rowitem ? c.colors.length % c.options.rowitem : 0;
                c.itemContainer.find('td:last').attr('colspan', t + 1);
                c.putInsertForm();
                c.showMe(true)
            },
            setOptions: function(d) {
                var e = this;
                var f = [],
                    dataSettings = [];
                f = $.extend({}, $.fn.colorPicker.options, d);
                dataSettings = e.$elem.data();
                $.each(dataSettings, function(a, b) {
                    if (typeof b == 'string') {
                        var c = b.match(/^\[|\]$/g);
                        if (c !== null) dataSettings[a] = eval(b)
                    }
                });
                return $.extend({}, f, dataSettings)
            },
            loadColors: function(a) {
                return $.ajax({
                    dataType: "json",
                    url: a
                })
            },
            collectColors: function() {
                var a = this;
                var b = a.options.colors;
                if (a.options.customcolors.length > 0) b = b.concat(a.options.customcolors);
                return b
            },
            setPosition: function() {
                var a = this,
                    target, picker;
                target = a.getElementOffset(a.$elem);
                picker = a.getElementOffset(a.pickerWindow);
                wWidth = $(i).width();
                switch (a.options.alignment.toLowerCase()) {
                    case 'tl':
                        left = target.l;
                        left = (parseInt(left + picker.w + a.btnClose.width()) >= wWidth) ? wWidth - picker.w - a.btnClose.width() - 5 : left;
                        a.pickerWindow.css({
                            left: left,
                            top: target.t - (picker.h + 2)
                        });
                        break;
                    case 'tr':
                        left = (target.l + target.w) - picker.w;
                        left = (left <= 0) ? 5 : left;
                        a.pickerWindow.css({
                            left: left,
                            top: target.t - (picker.h + 2)
                        });
                        break;
                    case 'br':
                        left = (target.l + target.w) - picker.w;
                        left = (left <= 0) ? 5 : left;
                        a.pickerWindow.css({
                            left: left,
                            top: target.t + target.h + 2
                        });
                        break;
                    default:
                        left = target.l;
                        left = (parseInt(left + picker.w + a.btnClose.width()) >= wWidth) ? wWidth - picker.w - a.btnClose.width() : left;
                        a.pickerWindow.css({
                            left: left,
                            top: target.t + target.h + 2
                        });
                        break
                }
            },
            getControlPanel: function() {
                var a = this;
                if (!a.controlContainer) a.controlContainer = $(a.template.div, {
                    class: 'bmd-cp-controls-container'
                }).appendTo(a.pickerContainer);
                return a.controlContainer
            },
            putInsertForm: function() {
                var a = this;
                if (a.options.insertcode === true) {
                    inputLabel = $(a.template.button).addClass('bmd-cp-button-prefix').appendTo(a.getControlPanel()).bind('click', function(e) {
                        e.preventDefault();
                        a.inputColor.focus()
                    });
                    a.inputColor = $(a.template.input).addClass('bmd-cp-insert-input').appendTo(a.getControlPanel());
                    a.buttonColor = $(a.template.button).addClass('bmd-cp-button-accept').appendTo(a.getControlPanel()).bind("click", function(e) {
                        e.preventDefault();
                        code = a.inputColor.val();
                        if (!a.isHexColor(code)) {
                            a.inputColor.focus().select();
                            return false
                        }
                        a.options.onSelect(a.$elem, a.returnColor(code));
                        a.hideMe()
                    })
                }
            },
            showMe: function(a) {
                var b = this;
                if ($(".bmd-cp-window[data-bmd-cp='open']").length) {
                    $(".bmd-cp-window").attr("data-bmd-cp", "closed").hide();
                    $(j).unbind('.cpEvents');
                    $(i).unbind('.cpEvents')
                }
                b.pickerWindow.attr("data-bmd-cp", "open");
                b.pickerWindow.show();
                if (a !== true && b.pickerWindow.hasClass("bmd-cp-fullscreen")) {
                    b.noScroll(true);
                    b.setFullscreen();
                    b.hideOnEsc()
                } else {
                    b.setPosition()
                }
                if (a === true && (b.detectMobile() || b.options.fullscreen === true)) {
                    b.fullscreen()
                }
                $(j).bind('mouseup.cpEvents', function(e) {
                    if (!b.pickerWindow.is(e.target) && !b.$elem.is(e.target) && b.pickerWindow.has(e.target).length === 0) {
                        b.hideMe()
                    }
                });
                $(i).bind('resize.cpEvents', function() {
                    if (b.pickerWindow.hasClass("bmd-cp-fullscreen")) b.setFullscreen();
                    else b.setPosition()
                })
            },
            hideMe: function() {
                var a = this;
                a.pickerWindow.attr("data-bmd-cp", "closed");
                a.pickerWindow.hide();
                a.noScroll();
                $(j).unbind('.cpEvents');
                $(i).unbind('.cpEvents')
            },
            hideOnEsc: function() {
                var b = this;
                if (b.options.esc === true) {
                    $(j).bind("keydown.cpEvents", function(a) {
                        if (a.keyCode == 27) b.hideMe();
                        return true
                    })
                }
            },
            noScroll: function(a) {
                var b = this;
                if (a === true) {
                    b.bodyState.overflow = b.bodyState.overflow || $('body').css('overflow');
                    $('html, body').css({
                        'overflow': 'hidden',
                        'overflow-y': 'hidden'
                    })
                } else {
                    $('html, body').css({
                        'overflow': b.bodyState.overflow,
                        'overflow-y': b.bodyState.overflow
                    })
                }
            },
            getElementOffset: function(a) {
                var o = [];
                dom_el = a.get(0);
                o.w = dom_el.offsetWidth;
                o.h = dom_el.offsetHeight;
                o.l = a.offset().left;
                o.t = a.offset().top;
                return o
            },
            returnColor: function(h) {
                var a = this;
                h = h.charAt(0) == '#' ? h.substring(1, 7) : h;
                c = a.hexToRGB(h);
                switch (a.options.colorformat.toLowerCase()) {
                    case 'rgb':
                        return 'rgb(' + c.r + ',' + c.g + ',' + c.b + ')';
                        break;
                    case 'rgba':
                        return 'rgba(' + c.r + ',' + c.g + ',' + c.b + ',1.0)';
                        break;
                    case '0x':
                        return '0x' + h;
                        break;
                    default:
                        return '#' + h;
                        break
                }
            },
            isHexColor: function(h) {
                return h.length === 6 && !isNaN(parseInt(h, 16))
            },
            hexToRGB: function(h) {
                var a = [];
                h = h.charAt(0) == '#' ? h.substring(1, 7) : h;
                a.r = parseInt(h.substring(0, 2).toString(), 16);
                a.g = parseInt(h.substring(2, 4).toString(), 16);
                a.b = parseInt(h.substring(4, 6).toString(), 16);
                return a
            },
            detectMobile: function() {
                return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))
            },
            invertCells: function(a) {
                var b = [];
                a.find("tr").each(function(r) {
                    $(this).find("td").each(function(c) {
                        b[c] = b[c] || $("<tr></tr>");
                        b[c].append($(this));
                        rowspan = $(this).attr('colspan') ? $(this).attr('colspan') : 0;
                        colspan = $(this).attr('rowspan') ? $(this).attr('rowspan') : 0;
                        if (rowspan > 0) $(this).attr('rowspan', rowspan).removeAttr('colspan');
                        if (colspan > 0) $(this).attr('colspan', colspan).removeAttr('rowspan')
                    })
                }).remove();
                $.each(b, function() {
                    a.append(this)
                })
            },
            template: {
                div: '<div/>',
                itemContainer: '<table/>',
                itemRow: '<tr/>',
                item: '<td/>',
                input: '<input type="text" maxlength="6" placeholder="FF6600"/>',
                button: '<button type="button">&nbsp;</button>'
            }
        };
        $.fn.colorPicker = function(b) {
            return this.each(function() {
                var a = Object.create(l);
                a.init(b, this)
            })
        };
        $.fn.colorPicker.options = {
            colors: ['#ffffff', '#000000', '#eeece1', '#1f497d', '#4f81bd', '#c0504d', '#9bbb59', '#8064a2', '#4bacc6', '#f79646', '#ffff00', '#f2f2f2', '#7f7f7f', '#ddd9c3', '#c6d9f0', '#dbe5f1', '#f2dcdb', '#ebf1dd', '#e5e0ec', '#dbeef3', '#fdeada', '#fff2ca', '#d8d8d8', '#595959', '#c4bd97', '#8db3e2', '#b8cce4', '#e5b9b7', '#d7e3bc', '#ccc1d9', '#b7dde8', '#fbd5b5', '#ffe694', '#bfbfbf', '#3f3f3f', '#938953', '#548dd4', '#95b3d7', '#d99694', '#c3d69b', '#b2a2c7', '#a5d0e0', '#fac08f', '#f2c314', '#a5a5a5', '#262626', '#494429', '#17365d', '#366092', '#953734', '#76923c', '#5f497a', '#92cddc', '#e36c09', '#c09100', '#7f7f7f', '#0c0c0c', '#1d1b10', '#0f243e', '#244061', '#632423', '#4f6128', '#3f3151', '#31859b', '#974806', '#7f6000'],
            customcolors: [],
            itemheight: 20,
            itemwidth: 20,
            insertcode: false,
            rowitem: 11,
            buttonclose: true,
            buttonfullscreen: true,
            fullscreen: false,
            esc: true,
            alignment: 'bl',
            colorformat: 'hex',
            onSelect: function(a, b) {
                console.log(b)
            }
        }
    })(jQuery, window, document)
}